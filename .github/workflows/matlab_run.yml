name: Run MATLAB scripts and check output against commit
on: [push]
jobs:
  vtests:
    runs-on: ubuntu-latest
    steps:
      # Clone this repository on the GitHub Actions runner 
      - uses: actions/checkout@v3
      # Backup all PNG files to later perform visual tests
      - name: Backup committed figures
        run : | # allows multi-line parsing *including* \n
          cd $GITHUB_WORKSPACE
          cp -r Figure Ref
      # Setup MATLAB @ latest on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v1
        with:
          release: latest
      # Retrieve all MATLAB dependencies from the MATVERSE
      - name: Init the MATVERSE
        uses: actions/checkout@v3
        with:
          repository: bellomia/MATVERSE
          path: MAT
          submodules: recursive
      - name: Retrieve GHOSTSCRIPT
        run : | # External dependency for export_figure
          sudo apt-get update
          sudo apt-get install ghostscript -y
          cd $GITHUB_WORKSPACE
      # Run all MATLAB scripts in the appropriate order
      - name: Run all scripts
        uses: matlab-actions/run-command@v1
        with:      
          command: | # here we are in the MATLAB shell
            addpath('MAT')
            matverse.enter
            cd Dati
            wrangler 
            qualita 
            stratifica
            cd ..
      # Compare the new output with the backup (vtests)
      - name: Perform visual test
        continue-on-error: true
        uses: matlab-actions/run-command@v1
        with:      
          command: | # here we are in the MATLAB shell
            cd Ref
            fprintf('Starting with visual tests...\n');
            old = {dir('*.png').name};
            vflag = false(1,length(old));
            for i = 1:length(old)
                imold{i} = imread(old{i});
            end
            cd ../Figure
            new = {dir('*.png').name};
            for i = 1:length(old)
                imnew{i} = imread(new{i});
                if isequal(imnew{i},imold{i});
                   vflag(i) = false;
                else
                   vflag(i) = true;
                   fprintf(2,'Failed: %s\n',new{i});
                   writecell(new(i),'vfail.txt',...
                              'Delimiter','tab',...
                              'WriteMode','append');
                end
            end
            cd ..
            if(any(vflag)) % print to logfile
              !cat Figure/vfail.txt 
              error('Some vtest failed:');
            end
            fprintf('> All visual tests passed!\n');
      # Upload all the new and old figures: human-eye test
      - name: Collect all the generated files... clean-up
        run : |
            mkdir failed
            mv Ref failed/OLD
            cp -r Figure failed/NEW
      - name: Upload old and new artifacts for human check
        if  : failure() # do not upload anything if passed
        uses: actions/upload-artifact@master
        with:
          name: vdiffs
          path: failed