# Run MATLAB scripts and check output against commit
name: Data-Analysis
on: # setup triggers
  push:
    paths: 
      - '**.m'   # diff in mfiles
  workflow_dispatch: # manual-run
    inputs:
      release:
        description: 'MATLAB RELEASE'     
        required: true
        default: 'R2020b' 
        type: choice
        options:
        - latest
        - R2022a
        - R2021b
        - R2021a
        - R2020b
        - R2020a
jobs:
  MATLAB-RUN:
    runs-on: ubuntu-latest
    steps:
      # Clone this repository on the GitHub Actions runner 
      - uses: actions/checkout@v3
      # Backup all PNG files to later perform visual tests
      - name: Backup committed figures
        run : | # allows multi-line parsing *including* \n
          cd $GITHUB_WORKSPACE
          cp -r Figure Ref
      - name: Define MATLAB release
        id  : release
        run : | # here we use /shell parameter expansion/
          RELEASE=${{ github.event.inputs.release }}
          echo "::set-output name=default::${RELEASE:-"R2020b"}"
      # Setup MATLAB on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v1
        with:      # retrieve previously exported value
          release: ${{ steps.release.outputs.default}}
      # Retrieve all MATLAB dependencies from the MATVERSE
      - name: Init the MATVERSE
        uses: actions/checkout@v3
        with:
          repository: bellomia/MATVERSE
          path: MAT
          submodules: recursive
      - name: Retrieve GHOSTSCRIPT
        run : | # External dependency for export_figure
          sudo apt-get update
          sudo apt-get install ghostscript -y
          cd $GITHUB_WORKSPACE
      # Run all MATLAB scripts in the appropriate order
      - name: Run all scripts
        uses: matlab-actions/run-command@v1
        with:      
          command: | # here we are in the MATLAB shell
            ver % print to log the *exact* version
            addpath('MAT')
            matverse.enter
            cd Dati
            wrangler   % import data
            qualita;     close all 
            stratifica;  close all 
            frequenza;   close all 
            effetti;     close all 
            distrazione; close all 
            sicurezza;   close all
            rescue;      close all
            cd ..
      # Compare the new output with the backup (vtests)
      - name: Perform visual test
        continue-on-error: true # soft fail for vtests
        uses: matlab-actions/run-command@v1
        with:      
          command: | # here we are in the MATLAB shell
            cd Ref
            fprintf('Starting with visual tests...\n');
            old = {dir('*.png').name};
            vflag = false(1,length(old));
            for i = 1:length(old)
                imold{i} = imread(old{i});
            end
            cd ../Figure
            new = {dir('*.png').name};
            for i = 1:length(old)
                imnew{i} = imread(new{i});
                if isequal(imnew{i},imold{i});
                   vflag(i) = false;
                else
                   vflag(i) = true;
                   fprintf(2,'Failed: %s\n',new{i});
                   writecell(new(i),'vfail.txt',...
                              'Delimiter','tab',...
                              'WriteMode','append');
                end
            end
            cd ..
            if(any(vflag)) 
              % Clean & Collect all the generated files
              !mkdir failed
              !mv Figure/vfail.txt failed
              !mv Ref failed/OLD
              !cp -r Figure failed/NEW
              % Raise exception
              error('^^^ Some vtests have failed! ^^^');
            end
            fprintf('> All visual tests passed!\n');
      # Upload all the new and old figures: human-eye test
      - name: Upload old and new artifacts for human check
        uses: actions/upload-artifact@master
        with:
          name: vdiffs
          path: failed